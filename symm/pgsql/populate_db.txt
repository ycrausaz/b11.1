-- Create or replace the random_string function
CREATE OR REPLACE FUNCTION random_string(length INTEGER)
RETURNS TEXT AS
$$
DECLARE
    chars TEXT[] := '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';
    result TEXT := '';
    i INTEGER := 0;
BEGIN
    -- Check if the given length is less than 0 and raise an exception if so
    IF length < 0 THEN
        RAISE EXCEPTION 'Given length cannot be less than 0';
    END IF;

    -- Loop through the given length to concatenate random characters
    FOR i IN 1..length LOOP
        result := result || chars[1 + FLOOR(RANDOM() * (ARRAY_LENGTH(chars, 1) - 1))];
    END LOOP;

    -- Return the generated random string
    RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Create or replace the random_between function
CREATE OR REPLACE FUNCTION random_between(low INT, high INT)
RETURNS INT AS
$$
BEGIN
    -- Return a random integer between the given low and high values (inclusive)
    RETURN FLOOR(RANDOM() * (high - low + 1) + low);
END;
$$ LANGUAGE plpgsql STRICT;

-- Create the function to generate the random string for "Nato Stock Number"
CREATE OR REPLACE FUNCTION random_nato_stock_number()
RETURNS TEXT AS $$
DECLARE
    random_string TEXT;
BEGIN
    -- Concatenate random digits and hyphens to form the required pattern
    random_string :=
        (FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT || '-' ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT || '-' ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT || '-' ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT)::TEXT;

    -- Return the generated random string
    RETURN random_string;
END;
$$ LANGUAGE plpgsql;

-- Create the function to generate the random string for "NSN Gruppe / Klasse"
CREATE OR REPLACE FUNCTION random_nsn_gruppe_klasse()
RETURNS TEXT AS $$
DECLARE
    random_string TEXT;
BEGIN
    -- Concatenate random digits and hyphens to form the required pattern
    random_string :=
        (FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT)::TEXT;

    -- Return the generated random string
    RETURN random_string;
END;
$$ LANGUAGE plpgsql;

-- Create the function to generate the random string for "Nato Versorgungs-Nr."
CREATE OR REPLACE FUNCTION random_nato_versorgungs_nr()
RETURNS TEXT AS $$
DECLARE
    random_string TEXT;
BEGIN
    -- Concatenate random digits and hyphens to form the required pattern
    random_string :=
        (FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT ||
        FLOOR(RANDOM() * 10)::INT::TEXT || FLOOR(RANDOM() * 10)::INT::TEXT)::TEXT;

    -- Return the generated random string
    RETURN random_string;
END;
$$ LANGUAGE plpgsql;

-- Create the function to return a random value from a predefined list
CREATE OR REPLACE FUNCTION random_hersteller()
RETURNS TEXT AS $$
DECLARE
    choices TEXT[] := '{grIL_01, grIL_02, grIL_03}';
    selected_value TEXT;
BEGIN
    -- Select a random value from the choices array
    selected_value := choices[1 + FLOOR(RANDOM() * ARRAY_LENGTH(choices, 1))];

    -- Return the selected value
    RETURN selected_value;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION random_s_or_v()
RETURNS CHAR AS $$
BEGIN
    -- Use the random() function to generate a random number between 0 and 1.
    -- If the number is less than 0.5, return 'S'; else, return 'V'.
    IF random() < 0.5 THEN
        RETURN 'S';
    ELSE
        RETURN 'V';
    END IF;
END;
$$ LANGUAGE plpgsql;


insert into symm_material (
is_transferred,
is_archived,
hersteller,
positions_nr, -- 1
kurztext_de, -- 2
kurztext_fr, -- 3
kurztext_en, -- 4
grunddatentext_de_1_zeile, -- 5
grunddatentext_de_2_zeile, -- 6
grunddatentext_fr_1_zeile, -- 7
grunddatentext_fr_2_zeile, -- 8
grunddatentext_en_1_zeile, -- 9
grunddatentext_en_2_zeile, -- 10
bruttogewicht, -- 11
gewichtseinheit, -- 12
nettogewicht, -- 13
groesse_abmessung, -- 14
ean_upc_code, -- 15
nato_stock_number, -- 16
nsn_gruppe_klasse, -- 17
nato_versorgungs_nr, -- 18
herstellerteilenummer, -- 19
normbezeichnung, -- 20
gefahrgutkennzeichen_id, -- 21
instandsetzbar, -- 22
chargenpflicht, -- 23
bestellmengeneinheit, -- 24
mindestbestellmenge, -- 25
lieferzeit, -- 26
einheit_l_b_h, -- 27
laenge, -- 28
breite, -- 29
hoehe, -- 30
preis, -- 31
waehrung, -- 32
preiseinheit, -- 33
lagerfaehigkeit, -- 34
exportkontrollauflage, -- 35
cage_code, -- 36
hersteller_name, -- 37
hersteller_adresse, -- 38
hersteller_plz, -- 39
hersteller_ort, -- 40
revision, -- 41
bemerkung, -- 42
produkthierarchie, -- 43
geschaeftspartner, -- 44
warengruppe, -- 45
endbevorratet, -- 46
revision_fremd, -- 47
revision_eigen, -- 48
zertifiziert_fuer_flug, -- 49
a_nummer, -- 50
verteilung_an_psd, -- 51
verteilung_an_ruag, -- 52
werkzuordnung_1_id, -- 53
werkzuordnung_2_id, -- 54
werkzuordnung_3_id, -- 55
werkzuordnung_4_id, -- 56
allgemeine_positionstypengruppe_id, -- 57
verkaufsorg, -- 58
vertriebsweg, -- 59
fuehrendes_material, -- 60
auszeichnungsfeld, -- 61
materialeinstufung_nach_zuva_id, -- 62
fertigungssteuerer_id, -- 63
kennzeichen_komplexes_system, -- 64
sonderablauf_id, -- 65
temperaturbedingung_id, -- 66
bewertungsklasse_id, -- 67
systemmanager, -- 68
kennziffer_bamf, -- 69
mietrelevanz, -- 70
next_higher_assembly, -- 71
nachschubklasse, -- 72
verteilung_apm_kerda, -- 73
verteilung_svsaa, -- 74
verteilung_cheops, -- 75
zuteilung_id, -- 76
auspraegung_id, -- 77
basismengeneinheit_id, -- 78
begru_id, -- 79
materialart_grunddaten_id, -- 80
materialzustandsverwaltung, -- 81
rueckfuehrungscode_id, -- 82
serialnummerprofil_id, -- 83
spare_part_class_code_id, -- 84
sparte_id, -- 85
uebersetzungsstatus_id, -- 86
orderbuchpflicht, -- 87
preissteuerung -- 88
) values (
't',
'f',
(select random_hersteller()),
(select random_between(1, 100)), -- positions_nr, -- 1
(select random_string(5)), -- kurztext_de, -- 2
(select random_string(5)), -- kurztext_fr, -- 3
(select random_string(5)), -- kurztext_en, -- 4
(select random_string(5)), -- grunddatentext_de_1_zeile, -- 5
(select random_string(5)), -- grunddatentext_de_2_zeile, -- 6
(select random_string(5)), -- grunddatentext_fr_1_zeile, -- 7
(select random_string(5)), -- grunddatentext_fr_2_zeile, -- 8
(select random_string(5)), -- grunddatentext_en_1_zeile, -- 9
(select random_string(5)), -- grunddatentext_en_2_zeile, -- 10
(select random_between(1, 100)), -- bruttogewicht, -- 11
'KG', -- gewichtseinheit, -- 12
(select random_between(1, 100)), -- nettogewicht, -- 13
(select random_between(1, 100)), -- groesse_abmessung, -- 14
(select random_string(13)), -- ean_upc_code, -- 15
(select random_nato_stock_number()), -- nato_stock_number, -- 16
(select random_nsn_gruppe_klasse()), -- nsn_gruppe_klasse, -- 17
(select random_nato_versorgungs_nr()), -- nato_versorgungs_nr, -- 18
(select random_string(12)), -- herstellerteilenummer, -- 19
(select random_string(18)), -- normbezeichnung, -- 20
(select id from symm_gefahrgutkennzeichen order by random() limit 1), -- gefahrgutkennzeichen, -- 21
(select random()::int::boolean), -- instandsetzbar, -- 22
(select random()::int::boolean), -- chargenpflicht, -- 23
(select random_between(1, 100)), -- bestellmengeneinheit, -- 24
(select random_between(1, 100)), -- mindestbestellmenge, -- 25
(select random_between(1, 100)), -- lieferzeit, -- 26
'MM', -- einheit_l_b_h, -- 27
(select random_between(1, 100)), -- laenge, -- 28
(select random_between(1, 100)), -- breite, -- 29
(select random_between(1, 100)), -- hoehe, -- 30
(select random_between(1, 100)), -- preis, -- 31
'CHF', -- waehrung, -- 32
(select random_between(1, 100)), -- preiseinheit, -- 33
(select random_between(1, 100)), -- lagerfaehigkeit, -- 34
(select random()::int::boolean), -- exportkontrollauflage, -- 35
(select random_string(5)), -- cage_code, -- 36
(select random_string(40)), -- hersteller_name, -- 37
(select random_string(40)), -- hersteller_adresse, -- 38
(select random_between(1000, 4000)), -- hersteller_plz, -- 39
(select random_string(40)), -- hersteller_ort, -- 40
(select random_string(30)), -- revision, -- 41
(select random_string(40)), -- bemerkung, -- 42
(select random_string(4)), -- produkthierarchie, -- 43
(select random_string(10)), -- geschaeftspartner, -- 44
(select random_string(9)), -- warengruppe, -- 45
(select random_string(5)), -- endbevorratet, -- 46
(select random_string(10)), -- revision_fremd, -- 47
(select random_string(10)), -- revision_eigen, -- 48
(select random()::int::boolean),  -- zertifiziert_fuer_flug, -- 49
(select random_string(10)), -- a_nummer, -- 50
(select random()::int::boolean), -- verteilung_an_psd, -- 51
(select random()::int::boolean), -- verteilung_an_ruag, -- 52
(select id from symm_werkzuordnung_1 order by random() limit 1), -- werk, -- 53
(select id from symm_werkzuordnung_2 order by random() limit 1), -- werk, -- 54
(select id from symm_werkzuordnung_3 order by random() limit 1), -- werk, -- 55
(select id from symm_werkzuordnung_4 order by random() limit 1), -- werk, -- 56
(select id from symm_allgemeinepositionstypengruppe order by random() limit 1), -- allgemeine_positionstypengruppe, -- 57
'M100', -- verkaufsorg, -- 58
'V0', -- vertriebsweg, -- 59
'', -- fuehrendes_material, -- 60
(select random()::int::boolean), -- auszeichnungsfeld, -- 61
(select id from symm_materialeinstufungnachzuva order by random() limit 1), -- materialeinstufungnachzuva -- 62
(select id from symm_fertigungssteuerer order by random() limit 1), -- fertigungssteuerer, -- 63
(select random()::int::boolean), -- kennzeichen_komplexes_system, -- 64
(select id from symm_sonderablauf order by random() limit 1), -- sonderablauf, -- 65
(select id from symm_temperaturbedingung order by random() limit 1), -- temperaturbedingung, -- 66
(select id from symm_bewertungsklasse order by random() limit 1), -- bewertungsklasse, -- 67
(select random_string(10)), -- systemmanager, -- 68
'55G', -- kennziffer_bamf, -- 69
(select random()::int::boolean), -- mietrelevanz, -- 70
(select random_string(10)), -- next_higher_assembly, -- 71
(select random_string(10)), -- nachschubklasse, -- 72
(select random()::int::boolean), -- verteilung_apm_kerda, -- 73
(select random()::int::boolean), -- verteilung_svsaa, -- 74
(select random()::int::boolean), -- verteilung_cheops, -- 75
(select id from symm_zuteilung order by random() limit 1), -- zuteilung, -- 76
(select id from symm_auspraegung order by random() limit 1), -- auspraegung, -- 77
(select id from symm_basismengeneinheit order by random() limit 1), -- basismengeneinheit_id, -- 78
(select id from symm_begru order by random() limit 1), -- begru_id, -- 79
(select id from symm_materialart order by random() limit 1), -- materialart_grunddaten_id, -- 80
(select random_between(1, 2)), -- materialzustandsverwaltung, -- 81
(select id from symm_rueckfuehrungscode order by random() limit 1), -- rueckfuehrungscode_id, -- 82
(select id from symm_serialnummerprofil order by random() limit 1), -- serialnummerprofil_id, -- 83
(select id from symm_sparepartclasscode order by random() limit 1), -- spare_part_class_code_id, -- 84
(select id from symm_sparte order by random() limit 1), -- sparte_id, -- 85
(select id from symm_uebersetzungsstatus order by random() limit 1), -- uebersetzungsstatus_id -- 86
(select random()::int::boolean), -- orderbuchpflicht -- 87
(select random_s_or_v()) -- preissteuerung -- 88
)
